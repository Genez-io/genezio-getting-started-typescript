{
  "version": 3,
  "sources": ["../src/sdk/remote.ts", "../src/sdk/taskService.sdk.ts", "../src/app.ts"],
  "sourcesContent": ["/**\n* This is an auto generated code. This code should not be modified since the file can be overwritten\n* if new genezio commands are executed.\n*/\n\nlet http: any = null;\nlet https: any = null;\nlet importDone: boolean = false;\n\nasync function importModules() {\n    if (typeof process !== \"undefined\" && process.versions != null && process.versions.node != null) {\n        const httpModule: string = 'http';\n        http = await import(httpModule);\n        const httpsModule: string = 'https';\n        https = await import(httpsModule);\n    }\n    importDone = true;\n}\n\nasync function makeRequestBrowser(request: any, url: any) {\n    // @ts-ignore\n    const response = await fetch(`${url}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request),\n    });\n    return response.json();\n}\n\nasync function makeRequestNode(request: any, url: any, agent: any) {\n\n    const data = JSON.stringify(request);\n    const hostUrl = new URL(url);\n\n    const options = {\n        hostname: hostUrl.hostname,\n        path: hostUrl.search ? hostUrl.pathname + hostUrl.search : hostUrl.pathname,\n        port: hostUrl.port,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': data.length,\n        },\n        agent: agent,\n    };\n    const client = url.includes('https') ? https : http;\n\n    return new Promise((resolve, reject) => {\n        const req = client.request(options, (res: any)=> {\n            let body = '';\n\n            res.on('data', (d: any) => {\n                body += d\n            });\n            res.on('end', async function() {\n                const response = JSON.parse(body);\n                resolve(response);\n            });\n\n        });\n\n        req.on('error', (error: any) => {\n            reject(error);\n        });\n\n        req.write(data);\n        req.end();\n    });\n}\n\n/**\n * The class through which all request to the Genezio backend will be passed.\n *\n */\n export class Remote {\n    url: any = undefined;\n    agent: any = undefined;\n\n    constructor(url: any) {\n        this.url = url;\n        if (http !== null && https !== null) {\n            const client = url.includes(\"https\") ? https : http;\n            this.agent = new client.Agent({ keepAlive: true });\n        }\n    }\n\n    async call(method: any, ...args: any[]) {\n        const requestContent = {\"jsonrpc\": \"2.0\", \"method\": method, \"params\": args, \"id\": 3};\n        let response: any = undefined;\n        if (!importDone) {\n            await importModules();\n        }\n\n        if (http !== null && https !== null) {\n            response = await makeRequestNode(requestContent, this.url, this.agent);\n        } else {\n            response = await makeRequestBrowser(requestContent, this.url);\n        }\n\n        if (response.error) {\n            return response.error.message;\n        }\n\n        return response.result;\n    }\n}\n", "/**\n* This is an auto generated code. This code should not be modified since the file can be overwritten\n* if new genezio commands are executed.\n*/\n\nimport { Remote } from \"./remote\";\n\nexport type Task = {id: string, token: string, title: string, url: string, solved: boolean, date: Date};\nexport type GetTasksResponse = {success: boolean, tasks: Array<Task>};\nexport type GetTaskResponse = {success: boolean, task?: Task};\nexport type UpdateTaskResponse = {success: boolean};\nexport type DeleteTaskResponse = {success: boolean};\n\nexport class TaskService {\n  static remote = new Remote(\"https://5thn7hie3jgyp6rbsorbxesznm0mflmc.lambda-url.us-east-1.on.aws/TaskService\");\n\n  static async getAllTasksByUser(token: string): Promise<GetTasksResponse> {\n    return await TaskService.remote.call(\"TaskService.getAllTasksByUser\", token);\n  }\n  static async createTask(token: string, title: string): Promise<GetTaskResponse> {\n    return await TaskService.remote.call(\"TaskService.createTask\", token, title);\n  }\n  static async updateTask(token: string, id: string, title: string, solved: boolean): Promise<UpdateTaskResponse> {\n    return await TaskService.remote.call(\"TaskService.updateTask\", token, id, title, solved);\n  }\n  static async deleteTask(token: string, id: string): Promise<DeleteTaskResponse> {\n    return await TaskService.remote.call(\"TaskService.deleteTask\", token, id);\n  }\n}\n\nexport { Remote };\n", "import { TaskService } from \"./sdk/taskService.sdk.js\";\n\nconst DELETE_ICON = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"#DC3545\" class=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\n<path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"/>\n</svg>`;\n\n// We want to persist the todo lists across page reloads.\n// For this we use the localStorage API.\n// If the user has no token yet, we generate a random one.\nlet token: string = localStorage.getItem(\"apiToken\")!;\nif (!token) {\n    // generate a random token\n    token =\n        Math.random().toString(36).substring(2, 15) +\n        Math.random().toString(36).substring(2, 15);\n    localStorage.setItem(\"apiToken\", token);\n}\n\n// Function that adds a new task\nasync function handleAdd() {\n    document.getElementById(\"modal-error-elem\")!.innerHTML = \"\";\n\n    // take taskTitle from the input field with id=\"task-title-input\"\n    const taskTitle = (document.getElementById(\"task-title-input\") as HTMLInputElement)!.value;\n\n    if (!taskTitle) {\n      // show an error message if title is missing\n      document.getElementById('modal-error-elem')!.innerHTML =\n        'Title is mandatory';\n      return;\n    }\n\n    // create a new task with the title and the token from local storage using the SDK\n    TaskService.createTask(\n        token,\n        taskTitle\n    ).then((res) => {\n        if (res.success) {\n            // reload the page\n            location.reload();\n        }\n    });\n}\n\n// add an event listener to the button with id=\"add-task-btn\"\ndocument\n  .getElementById('add-task-btn')!\n  .addEventListener('click', async (e) => {\n    e.preventDefault();\n    handleAdd();\n  });\n\n// iterate over all tasks\nTaskService.getAllTasksByUser(token).then((res) => {\n  if (res.success) {\n    // iterate over all tasks\n    for (const task of res.tasks) {\n      const taskContainer = document.getElementById('tasks')!;\n      const taskTitle = `<span>${task.title}</span>`;\n      // Check if the task link is present\n      const taskLink = task.url\n        ? `at <a href=\"${task.url}\" target=\"_blank\"> ${task.url}</a>`\n        : '';\n      const taskSolved = task.solved ? 'checked' : '';\n      // TODO - Genezio Challenge\n      // Implement the functionality for the delete button\n      // `onclick` should call the TaskServive.deleteTask(token, id) method from the generated SDK\n      const deleteButton = `<button class=\"btn\" onclick=\"\">${DELETE_ICON}</button>`\n\n      taskContainer.innerHTML += `\n        <div class=\"mb-3\">\n            <div class=\"d-flex align-items-center\">\n                <input type=\"checkbox\" ${\n                  task.solved ? 'checked' : ''\n                } class=\"task_checkbox\" id=${task.id}>\n                <p class=\"mb-0\" style=\"margin-right: auto; margin-left: 20px\">\n                  ${taskTitle}\n                  ${taskLink}\n                </p>\n                <span class=\"d-inline-block\" tabindex=\"0\" data-toggle=\"tooltip\" title=\"Check out genezio challenge\">\n                  ${deleteButton}\n                </span>\n            </div>\n        </div>\n        `;\n    }\n  }\n\n  // add an event listener to all checkboxes\n  const checkboxes = document.getElementsByClassName('task_checkbox');\n  for (const checkbox of checkboxes) {\n    checkbox.addEventListener('change', async (e) => {\n      // get the id of the task\n      const id = (e.target as HTMLInputElement).id;\n\n      // get the task by id\n      const task = res.tasks.find((task) => task.id === id);\n\n      // update the task\n      await TaskService.updateTask(\n        token,\n        id,\n        task!.title,\n        (e.target as HTMLInputElement).checked,\n      );\n    });\n  }\n});\n"],
  "mappings": "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",
  "names": ["http", "https", "importDone", "importModules", "makeRequestBrowser", "request", "url", "makeRequestNode", "agent", "data", "hostUrl", "options", "client", "resolve", "reject", "req", "res", "body", "d", "response", "error", "Remote", "method", "args", "requestContent", "_TaskService", "token", "title", "id", "solved", "Remote", "TaskService", "DELETE_ICON", "token", "handleAdd", "taskTitle", "TaskService", "res", "e", "task", "taskContainer", "taskLink", "taskSolved", "deleteButton", "checkboxes", "checkbox", "id"]
}
